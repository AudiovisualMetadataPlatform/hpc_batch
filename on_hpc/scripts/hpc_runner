#!/usr/bin/env python3

import sys
import subprocess
from pathlib import Path
import logging
import argparse
import time

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--debug", default=False, action="store_true", help="Turn on debugging")
    args = parser.parse_args()

    logging.basicConfig(level=logging.DEBUG if args.debug else logging.INFO, 
                        stream=sys.stderr,
                        format="%(asctime)s %(levelname)s %(message)s")

    workspace = Path(f"{sys.path[0]}/../workspace")
    if not workspace.exists():
        logging.error(f"Workspace doesn't exist! (sys.path[0]={sys.path[0]})")
        exit(1)

    # continue running jobs until there are no more to do.
    while True:
        for job in workspace.iterdir():
            pending = 0
            if not job.is_dir() or (job / "finished.out").exists():
                # skip non-directories and those which are finished.
                continue
            
            if not (job / "job.sh").exists() or (job / "job.sh").stat().st_mode & 0o100 != 0o100:                  
                # if the job directory exists but there's no runnable job.sh file,
                # wait until it is 10 minutes old to allow for uploads to
                # complete.  
                if time.time() - job.stat().st_mtime < 600:
                    pending += 1
                    logging.debug(f"Adding pending job {job}")
                continue

            # run the job and create the finished.out file.
            with open(job / "stdout.txt", mode="w", encoding='utf-8') as stdout:
                with open(job / "stderr.txt", mode="w", encoding='utf-8') as stderr:
                    script = job / "job.sh"                    
                    logging.debug(f"Running {script}")
                    #proc = subprocess.run([script],
                    #                    stdout=stdout, stderr=stderr)
                    proc = subprocess.run([script], stderr=subprocess.PIPE, stdout=subprocess.PIPE, encoding='utf8')
                    stdout.write(proc.stdout)
                    stderr.write(proc.stderr)
                    with open(job / "finished.out", mode="w") as f:
                        f.write(str(proc.returncode) + "\n")
                    logging.debug(f"Exit with return code {proc.returncode}")
        
        if pending:
            logging.debug(f"{pending} jobs are pending...sleeping to retry")
            time.sleep(30)
        else:
            break

        

if __name__ == "__main__":
    main()